{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\brandon\\\\html2\\\\typle\\\\typlev1\\\\app\\\\frontend\\\\src\\\\components\\\\jsx_typle\\\\wordsTyple.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useContext } from 'react';\nimport MenuButton from '../jsx_buttons/menuButton';\nimport { UserContext } from '../../contexts/userContext';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction WordsTyple(_ref) {\n  _s();\n  let {\n    text\n  } = _ref;\n  const {\n    user\n  } = useContext(UserContext);\n  const [topWPM, setTopWPM] = useState(null);\n\n  //timer part\n  const [elapsedTime, setElapsedTime] = useState(0);\n  const [timerOnOff, setTimerOnOff] = useState(0);\n  const [wpm, setWpm] = useState(null);\n  const words = text.split(\" \");\n  const numWords = words.length;\n  React.useEffect(() => {\n    //intervalId is what is what the setInterval method puts data into\n    let intervalId;\n    let startTime;\n    if (user) {\n      axios.get(`http://localhost:5000/api/userStats/${user}`).then(response => {\n        setTopWPM(response.data.topWPM);\n      }).catch(error => {\n        console.log(\"error\" + error);\n      });\n    }\n    if (timerOnOff === 1) {\n      startTime = Date.now();\n      //setInterval built in java function 2 params (function, interval)\n      //so updates time every 1 milisecond\n      intervalId = setInterval(() => {\n        const currentTime = Date.now();\n        const newTime = currentTime - startTime;\n        setElapsedTime(newTime);\n      }, 1);\n    }\n    if (timerOnOff === 2) {\n      setElapsedTime(0);\n    }\n    if (timerOnOff === 3) {\n      setWpm((numWords / (elapsedTime / 60000)).toFixed(2));\n      let wpm = (numWords / (elapsedTime / 60000)).toFixed(2);\n      if (wpm > topWPM) {\n        axios.put(`http://localhost:5000/api/userStatsWPM/${user}`, {\n          wpm\n        }).then(response => {\n          console.log('User profile updated:', response.data);\n        }).catch(error => {\n          console.error('Error updating user profile:', error);\n        });\n      }\n    }\n    return () => {\n      clearInterval(intervalId);\n    };\n  }, [timerOnOff]);\n  const [userInput, setUserInput] = useState('');\n  const [currentIndex, setCurrentIndex] = useState(0);\n  useEffect(() => {\n    const handleKeyDown = event => {\n      const {\n        key\n      } = event;\n\n      //gets currentChar in level\n      const currentChar = text[currentIndex];\n      if (key === currentChar) {\n        setUserInput(prevInput => prevInput + key);\n        setCurrentIndex(prevIndex => prevIndex + 1);\n        if (currentIndex === text.length - 1) {\n          setTimerOnOff(3);\n          // console.log(elapsedTime);\n        }\n\n        if (currentIndex === 0) {\n          //starts timer when user starts\n          setTimerOnOff(1);\n        }\n      }\n    };\n    document.addEventListener('keydown', handleKeyDown);\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [currentIndex, text]);\n\n  //appending text to renderText for as many correct keys user has pushed\n  const renderText = () => {\n    let renderedText = [];\n    for (let i = 0; i < text.length; i++) {\n      const char = text[i];\n      const style = i < currentIndex ? {\n        color: 'blue'\n      } : {\n        color: 'black'\n      };\n      renderedText.push( /*#__PURE__*/_jsxDEV(\"span\", {\n        style: style,\n        children: char\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this));\n    }\n    return renderedText;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"center\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Type!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: renderText()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Time: \", elapsedTime / 1000, \" secondes\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 9\n    }, this), timerOnOff === 3 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"EndScreen\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"You completed the Typle!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Time: \", elapsedTime / 1000, \" secondes\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Words per min: \", wpm]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(MenuButton, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 30\n    }, this) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 5\n  }, this);\n}\n_s(WordsTyple, \"bXH/MYIzHJuelLjK1s8wPDhUoIA=\");\n_c = WordsTyple;\nexport default WordsTyple;\nvar _c;\n$RefreshReg$(_c, \"WordsTyple\");","map":{"version":3,"names":["React","useState","useEffect","useContext","MenuButton","UserContext","axios","jsxDEV","_jsxDEV","WordsTyple","_ref","_s","text","user","topWPM","setTopWPM","elapsedTime","setElapsedTime","timerOnOff","setTimerOnOff","wpm","setWpm","words","split","numWords","length","intervalId","startTime","get","then","response","data","catch","error","console","log","Date","now","setInterval","currentTime","newTime","toFixed","put","clearInterval","userInput","setUserInput","currentIndex","setCurrentIndex","handleKeyDown","event","key","currentChar","prevInput","prevIndex","document","addEventListener","removeEventListener","renderText","renderedText","i","char","style","color","push","children","fileName","_jsxFileName","lineNumber","columnNumber","className","_c","$RefreshReg$"],"sources":["C:/Users/brandon/html2/typle/typlev1/app/frontend/src/components/jsx_typle/wordsTyple.jsx"],"sourcesContent":["import React, { useState, useEffect, useContext } from 'react';\r\nimport MenuButton from '../jsx_buttons/menuButton';\r\nimport { UserContext } from '../../contexts/userContext';\r\nimport axios from 'axios';\r\n\r\n\r\nfunction WordsTyple({text}) {\r\n    const {user} = useContext(UserContext);\r\n    const [topWPM, setTopWPM] = useState(null);\r\n\r\n    //timer part\r\n    const [elapsedTime, setElapsedTime] = useState(0);\r\n    const [timerOnOff, setTimerOnOff] = useState(0);\r\n    const [wpm, setWpm] = useState(null);\r\n\r\n    const words = text.split(\" \");\r\n    const numWords = words.length;\r\n\r\n    React.useEffect(() => {\r\n        //intervalId is what is what the setInterval method puts data into\r\n        let intervalId;\r\n        let startTime;\r\n\r\n        if(user) {\r\n          axios.get(`http://localhost:5000/api/userStats/${user}`)\r\n            .then(response => {\r\n              setTopWPM(response.data.topWPM);\r\n            })\r\n            .catch(error => {\r\n              console.log(\"error\" + error);\r\n            })\r\n        }\r\n    \r\n        if (timerOnOff === 1) {\r\n            startTime = Date.now();\r\n            //setInterval built in java function 2 params (function, interval)\r\n            //so updates time every 1 milisecond\r\n            intervalId = setInterval(() => {\r\n                const currentTime = Date.now();\r\n                const newTime = currentTime - startTime;\r\n                setElapsedTime(newTime);\r\n            }, 1);\r\n        }\r\n    \r\n        if(timerOnOff === 2) {\r\n            setElapsedTime(0);\r\n        }\r\n\r\n        if(timerOnOff === 3) {\r\n          setWpm((numWords/(elapsedTime/60000)).toFixed(2));\r\n          let wpm = (numWords/(elapsedTime/60000)).toFixed(2);\r\n          if(wpm > topWPM) {\r\n            axios.put(`http://localhost:5000/api/userStatsWPM/${user}`, {wpm})\r\n              .then(response => {\r\n                  console.log('User profile updated:', response.data);\r\n              })\r\n              .catch(error => {\r\n                  console.error('Error updating user profile:', error);\r\n              });\r\n          }\r\n        }\r\n        \r\n        return () => {\r\n          clearInterval(intervalId);\r\n        };\r\n      }, [timerOnOff]);\r\n\r\n  const [userInput, setUserInput] = useState('');\r\n  const [currentIndex, setCurrentIndex] = useState(0);\r\n\r\n  useEffect(() => {\r\n    const handleKeyDown = (event) => {\r\n      const { key } = event;\r\n\r\n      //gets currentChar in level\r\n      const currentChar = text[currentIndex];\r\n\r\n      if (key === currentChar) {\r\n        setUserInput((prevInput) => prevInput + key);\r\n        setCurrentIndex((prevIndex) => prevIndex + 1);\r\n        if(currentIndex === (text.length - 1)) {\r\n            setTimerOnOff(3);\r\n            // console.log(elapsedTime);\r\n        }\r\n        if(currentIndex === 0) {\r\n          //starts timer when user starts\r\n          setTimerOnOff(1);\r\n        }\r\n      }\r\n      \r\n    };\r\n\r\n    document.addEventListener('keydown', handleKeyDown);\r\n\r\n    return () => {\r\n      document.removeEventListener('keydown', handleKeyDown);\r\n    };\r\n  }, [currentIndex, text]);\r\n\r\n  //appending text to renderText for as many correct keys user has pushed\r\n  const renderText = () => {\r\n    let renderedText = [];\r\n    for (let i = 0; i < text.length; i++) {\r\n      const char = text[i];\r\n      const style =\r\n        i < currentIndex\r\n          ? { color: 'blue' }\r\n          : { color: 'black' };\r\n      renderedText.push(\r\n        <span key={i} style={style}>\r\n          {char}\r\n        </span>\r\n      );\r\n    }\r\n    return renderedText;\r\n  };\r\n\r\n  return (\r\n    <div>\r\n        <center>\r\n            <h1>Type!</h1>\r\n            <p>{renderText()}</p>\r\n            <p>Time: {elapsedTime/1000} secondes</p>\r\n        </center>\r\n        {timerOnOff === 3 ? (<div className=\"EndScreen\">\r\n            <h1>You completed the Typle!</h1>\r\n            <br />\r\n            <p>Time: {elapsedTime/1000} secondes</p>\r\n            <p>Words per min: {wpm}</p>\r\n            <MenuButton />\r\n        </div>) : null}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default WordsTyple;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,UAAU,QAAQ,OAAO;AAC9D,OAAOC,UAAU,MAAM,2BAA2B;AAClD,SAASC,WAAW,QAAQ,4BAA4B;AACxD,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAG1B,SAASC,UAAUA,CAAAC,IAAA,EAAS;EAAAC,EAAA;EAAA,IAAR;IAACC;EAAI,CAAC,GAAAF,IAAA;EACtB,MAAM;IAACG;EAAI,CAAC,GAAGV,UAAU,CAACE,WAAW,CAAC;EACtC,MAAM,CAACS,MAAM,EAAEC,SAAS,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;;EAE1C;EACA,MAAM,CAACe,WAAW,EAAEC,cAAc,CAAC,GAAGhB,QAAQ,CAAC,CAAC,CAAC;EACjD,MAAM,CAACiB,UAAU,EAAEC,aAAa,CAAC,GAAGlB,QAAQ,CAAC,CAAC,CAAC;EAC/C,MAAM,CAACmB,GAAG,EAAEC,MAAM,CAAC,GAAGpB,QAAQ,CAAC,IAAI,CAAC;EAEpC,MAAMqB,KAAK,GAAGV,IAAI,CAACW,KAAK,CAAC,GAAG,CAAC;EAC7B,MAAMC,QAAQ,GAAGF,KAAK,CAACG,MAAM;EAE7BzB,KAAK,CAACE,SAAS,CAAC,MAAM;IAClB;IACA,IAAIwB,UAAU;IACd,IAAIC,SAAS;IAEb,IAAGd,IAAI,EAAE;MACPP,KAAK,CAACsB,GAAG,CAAE,uCAAsCf,IAAK,EAAC,CAAC,CACrDgB,IAAI,CAACC,QAAQ,IAAI;QAChBf,SAAS,CAACe,QAAQ,CAACC,IAAI,CAACjB,MAAM,CAAC;MACjC,CAAC,CAAC,CACDkB,KAAK,CAACC,KAAK,IAAI;QACdC,OAAO,CAACC,GAAG,CAAC,OAAO,GAAGF,KAAK,CAAC;MAC9B,CAAC,CAAC;IACN;IAEA,IAAIf,UAAU,KAAK,CAAC,EAAE;MAClBS,SAAS,GAAGS,IAAI,CAACC,GAAG,CAAC,CAAC;MACtB;MACA;MACAX,UAAU,GAAGY,WAAW,CAAC,MAAM;QAC3B,MAAMC,WAAW,GAAGH,IAAI,CAACC,GAAG,CAAC,CAAC;QAC9B,MAAMG,OAAO,GAAGD,WAAW,GAAGZ,SAAS;QACvCV,cAAc,CAACuB,OAAO,CAAC;MAC3B,CAAC,EAAE,CAAC,CAAC;IACT;IAEA,IAAGtB,UAAU,KAAK,CAAC,EAAE;MACjBD,cAAc,CAAC,CAAC,CAAC;IACrB;IAEA,IAAGC,UAAU,KAAK,CAAC,EAAE;MACnBG,MAAM,CAAC,CAACG,QAAQ,IAAER,WAAW,GAAC,KAAK,CAAC,EAAEyB,OAAO,CAAC,CAAC,CAAC,CAAC;MACjD,IAAIrB,GAAG,GAAG,CAACI,QAAQ,IAAER,WAAW,GAAC,KAAK,CAAC,EAAEyB,OAAO,CAAC,CAAC,CAAC;MACnD,IAAGrB,GAAG,GAAGN,MAAM,EAAE;QACfR,KAAK,CAACoC,GAAG,CAAE,0CAAyC7B,IAAK,EAAC,EAAE;UAACO;QAAG,CAAC,CAAC,CAC/DS,IAAI,CAACC,QAAQ,IAAI;UACdI,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEL,QAAQ,CAACC,IAAI,CAAC;QACvD,CAAC,CAAC,CACDC,KAAK,CAACC,KAAK,IAAI;UACZC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;QACxD,CAAC,CAAC;MACN;IACF;IAEA,OAAO,MAAM;MACXU,aAAa,CAACjB,UAAU,CAAC;IAC3B,CAAC;EACH,CAAC,EAAE,CAACR,UAAU,CAAC,CAAC;EAEpB,MAAM,CAAC0B,SAAS,EAAEC,YAAY,CAAC,GAAG5C,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAAC6C,YAAY,EAAEC,eAAe,CAAC,GAAG9C,QAAQ,CAAC,CAAC,CAAC;EAEnDC,SAAS,CAAC,MAAM;IACd,MAAM8C,aAAa,GAAIC,KAAK,IAAK;MAC/B,MAAM;QAAEC;MAAI,CAAC,GAAGD,KAAK;;MAErB;MACA,MAAME,WAAW,GAAGvC,IAAI,CAACkC,YAAY,CAAC;MAEtC,IAAII,GAAG,KAAKC,WAAW,EAAE;QACvBN,YAAY,CAAEO,SAAS,IAAKA,SAAS,GAAGF,GAAG,CAAC;QAC5CH,eAAe,CAAEM,SAAS,IAAKA,SAAS,GAAG,CAAC,CAAC;QAC7C,IAAGP,YAAY,KAAMlC,IAAI,CAACa,MAAM,GAAG,CAAE,EAAE;UACnCN,aAAa,CAAC,CAAC,CAAC;UAChB;QACJ;;QACA,IAAG2B,YAAY,KAAK,CAAC,EAAE;UACrB;UACA3B,aAAa,CAAC,CAAC,CAAC;QAClB;MACF;IAEF,CAAC;IAEDmC,QAAQ,CAACC,gBAAgB,CAAC,SAAS,EAAEP,aAAa,CAAC;IAEnD,OAAO,MAAM;MACXM,QAAQ,CAACE,mBAAmB,CAAC,SAAS,EAAER,aAAa,CAAC;IACxD,CAAC;EACH,CAAC,EAAE,CAACF,YAAY,EAAElC,IAAI,CAAC,CAAC;;EAExB;EACA,MAAM6C,UAAU,GAAGA,CAAA,KAAM;IACvB,IAAIC,YAAY,GAAG,EAAE;IACrB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG/C,IAAI,CAACa,MAAM,EAAEkC,CAAC,EAAE,EAAE;MACpC,MAAMC,IAAI,GAAGhD,IAAI,CAAC+C,CAAC,CAAC;MACpB,MAAME,KAAK,GACTF,CAAC,GAAGb,YAAY,GACZ;QAAEgB,KAAK,EAAE;MAAO,CAAC,GACjB;QAAEA,KAAK,EAAE;MAAQ,CAAC;MACxBJ,YAAY,CAACK,IAAI,eACfvD,OAAA;QAAcqD,KAAK,EAAEA,KAAM;QAAAG,QAAA,EACxBJ;MAAI,GADID,CAAC;QAAAM,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEN,CACR,CAAC;IACH;IACA,OAAOV,YAAY;EACrB,CAAC;EAED,oBACElD,OAAA;IAAAwD,QAAA,gBACIxD,OAAA;MAAAwD,QAAA,gBACIxD,OAAA;QAAAwD,QAAA,EAAI;MAAK;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACd5D,OAAA;QAAAwD,QAAA,EAAIP,UAAU,CAAC;MAAC;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACrB5D,OAAA;QAAAwD,QAAA,GAAG,QAAM,EAAChD,WAAW,GAAC,IAAI,EAAC,WAAS;MAAA;QAAAiD,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACpC,CAAC,EACRlD,UAAU,KAAK,CAAC,gBAAIV,OAAA;MAAK6D,SAAS,EAAC,WAAW;MAAAL,QAAA,gBAC3CxD,OAAA;QAAAwD,QAAA,EAAI;MAAwB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACjC5D,OAAA;QAAAyD,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eACN5D,OAAA;QAAAwD,QAAA,GAAG,QAAM,EAAChD,WAAW,GAAC,IAAI,EAAC,WAAS;MAAA;QAAAiD,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eACxC5D,OAAA;QAAAwD,QAAA,GAAG,iBAAe,EAAC5C,GAAG;MAAA;QAAA6C,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC3B5D,OAAA,CAACJ,UAAU;QAAA6D,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACb,CAAC,GAAI,IAAI;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACb,CAAC;AAEV;AAACzD,EAAA,CA/HQF,UAAU;AAAA6D,EAAA,GAAV7D,UAAU;AAiInB,eAAeA,UAAU;AAAC,IAAA6D,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
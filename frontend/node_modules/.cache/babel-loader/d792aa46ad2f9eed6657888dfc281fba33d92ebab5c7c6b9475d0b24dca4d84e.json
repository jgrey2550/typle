{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\brandon\\\\html2\\\\typle\\\\typlev1\\\\app\\\\src\\\\components\\\\jsx_campaign\\\\words.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\n\n//importing levels\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst levels = {\n  level1: require('../texts/level1.txt'),\n  level2: require('../texts/level2.txt'),\n  level3: require('../texts/level3.txt'),\n  level4: require('../texts/level4.txt'),\n  level5: require('../texts/level5.txt'),\n  level6: require('../texts/level6.txt'),\n  level7: require('../texts/level7.txt'),\n  level8: require('../texts/level8.txt'),\n  level9: require('../texts/level9.txt'),\n  level10: require('../texts/level10.txt')\n};\nfunction Words(_ref) {\n  _s();\n  let {\n    levelNum,\n    setCompletion,\n    changeTimer,\n    changeIndex,\n    currentIndex\n  } = _ref;\n  //setting up useState variables to have text displayed for the level \"text\"\n  // current userInput and currentIndex that user is on relative to text\n  const [text, setText] = useState('');\n  const [userInput, setUserInput] = useState('');\n\n  //getting the level name from the level number\n  const levelString = \"level\" + levelNum;\n  // console.log(levelNum);\n\n  //fetching text from ./texts/level1.txt and setting text variable to the contents of ./texts/level1.txt\n  useEffect(() => {\n    fetch(levels[levelString]).then(response => response.text()).then(textContent => {\n      setText(textContent);\n    });\n  }, [levelString]);\n  useEffect(() => {\n    const handleKeyDown = event => {\n      //handling keypresses and storing key to const key\n      //same as saying const key = event.key\n      const {\n        key\n      } = event;\n\n      //gets currentChar in level\n      const currentChar = text[currentIndex];\n      if (key === currentChar) {\n        //set userInput by concatenating previous input + new key\n        //default callBack for seetUserInput is the previous value of userInput and prevInput is a generic name\n        setUserInput(prevInput => prevInput + key);\n        changeIndex(prevIndex => prevIndex + 1);\n        if (currentIndex === text.length - 1) {\n          //when completed adds <endscreen> in <inGame>\n          //also stops timer\n          setCompletion(2);\n          changeTimer(0);\n        }\n        if (currentIndex === 0) {\n          //starts timer when user starts\n          changeTimer(1);\n        }\n      }\n    };\n    document.addEventListener('keydown', handleKeyDown);\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [currentIndex, text]);\n\n  //appending text to renderText for as many correct keys user has pushed\n  const renderText = () => {\n    let renderedText = [];\n    for (let i = 0; i < text.length; i++) {\n      const char = text[i];\n      const style = i < currentIndex ? {\n        color: 'blue'\n      } : {\n        color: 'black'\n      };\n      renderedText.push( /*#__PURE__*/_jsxDEV(\"span\", {\n        style: style,\n        children: char\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this));\n    }\n    return renderedText;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"center\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Type!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: renderText()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 5\n  }, this);\n}\n_s(Words, \"VBB3HJvRXKCCxC5+27tmUiaxt6k=\");\n_c = Words;\nexport default Words;\nvar _c;\n$RefreshReg$(_c, \"Words\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","levels","level1","require","level2","level3","level4","level5","level6","level7","level8","level9","level10","Words","_ref","_s","levelNum","setCompletion","changeTimer","changeIndex","currentIndex","text","setText","userInput","setUserInput","levelString","fetch","then","response","textContent","handleKeyDown","event","key","currentChar","prevInput","prevIndex","length","document","addEventListener","removeEventListener","renderText","renderedText","i","char","style","color","push","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/brandon/html2/typle/typlev1/app/src/components/jsx_campaign/words.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\n//importing levels\r\nconst levels = {\r\n  level1: require('../texts/level1.txt'),\r\n  level2: require('../texts/level2.txt'),\r\n  level3: require('../texts/level3.txt'),\r\n  level4: require('../texts/level4.txt'),\r\n  level5: require('../texts/level5.txt'),\r\n  level6: require('../texts/level6.txt'),\r\n  level7: require('../texts/level7.txt'),\r\n  level8: require('../texts/level8.txt'),\r\n  level9: require('../texts/level9.txt'),\r\n  level10: require('../texts/level10.txt')\r\n};\r\n\r\nfunction Words({levelNum, setCompletion, changeTimer, changeIndex, currentIndex}) {\r\n    //setting up useState variables to have text displayed for the level \"text\"\r\n    // current userInput and currentIndex that user is on relative to text\r\n  const [text, setText] = useState('');\r\n  const [userInput, setUserInput] = useState('');\r\n\r\n  //getting the level name from the level number\r\n  const levelString = \"level\" + levelNum;\r\n  // console.log(levelNum);\r\n\r\n  //fetching text from ./texts/level1.txt and setting text variable to the contents of ./texts/level1.txt\r\n  useEffect(() => {\r\n    fetch(levels[levelString])\r\n      .then((response) => response.text())\r\n      .then((textContent) => {\r\n        setText(textContent);\r\n      });\r\n  }, [levelString]);\r\n\r\n  useEffect(() => {\r\n    const handleKeyDown = (event) => {\r\n        //handling keypresses and storing key to const key\r\n        //same as saying const key = event.key\r\n      const { key } = event;\r\n\r\n      //gets currentChar in level\r\n      const currentChar = text[currentIndex];\r\n\r\n      if (key === currentChar) {\r\n        //set userInput by concatenating previous input + new key\r\n        //default callBack for seetUserInput is the previous value of userInput and prevInput is a generic name\r\n        setUserInput((prevInput) => prevInput + key);\r\n        changeIndex((prevIndex) => prevIndex + 1);\r\n        if(currentIndex === (text.length - 1)) {\r\n          //when completed adds <endscreen> in <inGame>\r\n          //also stops timer\r\n          setCompletion(2);\r\n          changeTimer(0);\r\n        }\r\n        if(currentIndex === 0) {\r\n          //starts timer when user starts\r\n          changeTimer(1);\r\n        }\r\n      }\r\n    };\r\n\r\n    document.addEventListener('keydown', handleKeyDown);\r\n\r\n    return () => {\r\n      document.removeEventListener('keydown', handleKeyDown);\r\n    };\r\n  }, [currentIndex, text]);\r\n\r\n  //appending text to renderText for as many correct keys user has pushed\r\n  const renderText = () => {\r\n    let renderedText = [];\r\n    for (let i = 0; i < text.length; i++) {\r\n      const char = text[i];\r\n      const style =\r\n        i < currentIndex\r\n          ? { color: 'blue' }\r\n          : { color: 'black' };\r\n      renderedText.push(\r\n        <span key={i} style={style}>\r\n          {char}\r\n        </span>\r\n      );\r\n    }\r\n    return renderedText;\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <center>\r\n        <h1>Type!</h1>\r\n        <p>{renderText()}</p>\r\n      </center>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Words;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
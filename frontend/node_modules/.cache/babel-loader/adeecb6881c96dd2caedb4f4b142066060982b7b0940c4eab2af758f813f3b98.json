{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\brandon\\\\html2\\\\typle\\\\typlev1\\\\app\\\\frontend\\\\src\\\\components\\\\jsx_campaign\\\\inGame.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useContext, useEffect } from \"react\";\nimport Keyboard from './keyboard';\nimport Words from './words';\nimport Logo from '../logo';\nimport EndScreen from \"./endScreen\";\nimport Timer from \"./timer\";\nimport axios from \"axios\";\nimport { UserContext } from \"../../contexts/userContext\";\n\n//takign in levelNum in from app screen to know which level to display\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction InGame(_ref) {\n  _s();\n  let {\n    levelNum,\n    onScreenChangeCampaign,\n    changeScreen\n  } = _ref;\n  //completion boolean 1 for incomplet then switches to 2 when complete\n  //also timer on off that's value is passed into timer and function is passed into words\n  //also index to control which index in text user is at\n  //elapsed time and function to update time also\n  const [timerOnOff, setTimerOnOff] = useState(0);\n  const [completion, setCompletion] = useState(1);\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [elapsedTime, setElapsedTime] = useState(0);\n  const [gotSkin, setGotSkin] = useState(0);\n  //so the skin is only axios.get once\n\n  const {\n    user\n  } = useContext(UserContext);\n  const [equiptSkin, setEquiptSkin] = useState(\"Default\");\n  useEffect(() => {\n    if (gotSkin === 0) {\n      axios.get(`http://localhost:5000/api/userProfile/${user}`).then(response => {\n        setEquiptSkin(response.data.equiptSkin);\n        setGotSkin(1);\n      }).catch(error => {\n        console.log('Error fetching user info:', error);\n      });\n    }\n  });\n  const changeTimer = newTimeKey => {\n    setTimerOnOff(newTimeKey);\n  };\n  const timerReset = () => {\n    setTimerOnOff(2);\n  };\n  const changeIndex = newIndex => {\n    setCurrentIndex(newIndex);\n  };\n  const resetIndex = () => {\n    setCurrentIndex(0);\n  };\n  const handleCompletionChange = completionNum => {\n    setCompletion(completionNum);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'flex',\n      flexDirection: 'column'\n    },\n    children: [/*#__PURE__*/_jsxDEV(Logo, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Words, {\n      levelNum: levelNum,\n      setCompletion: handleCompletionChange,\n      changeTimer: changeTimer,\n      changeIndex: changeIndex,\n      currentIndex: currentIndex\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Keyboard, {\n      equiptSkin: equiptSkin\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Timer, {\n      timerOnOff: timerOnOff,\n      setElapsedTime: setElapsedTime,\n      elapsedTime: elapsedTime\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }, this), completion === 2 ? /*#__PURE__*/_jsxDEV(EndScreen, {\n      onScreenChangeCampaign: onScreenChangeCampaign,\n      changeScreen: changeScreen,\n      timerReset: timerReset,\n      resetIndex: resetIndex,\n      handleCompletionChange: handleCompletionChange,\n      elapsedTime: elapsedTime,\n      levelNum: levelNum\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 30\n    }, this) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 12\n  }, this);\n}\n_s(InGame, \"0vUkFzV1zOl6iGwXRQlBLQG72cg=\");\n_c = InGame;\nexport default InGame;\nvar _c;\n$RefreshReg$(_c, \"InGame\");","map":{"version":3,"names":["React","useState","useContext","useEffect","Keyboard","Words","Logo","EndScreen","Timer","axios","UserContext","jsxDEV","_jsxDEV","InGame","_ref","_s","levelNum","onScreenChangeCampaign","changeScreen","timerOnOff","setTimerOnOff","completion","setCompletion","currentIndex","setCurrentIndex","elapsedTime","setElapsedTime","gotSkin","setGotSkin","user","equiptSkin","setEquiptSkin","get","then","response","data","catch","error","console","log","changeTimer","newTimeKey","timerReset","changeIndex","newIndex","resetIndex","handleCompletionChange","completionNum","style","display","flexDirection","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/brandon/html2/typle/typlev1/app/frontend/src/components/jsx_campaign/inGame.jsx"],"sourcesContent":["import React, { useState, useContext, useEffect } from \"react\";\r\nimport Keyboard from './keyboard';\r\nimport Words from './words';\r\nimport Logo from '../logo';\r\nimport EndScreen from \"./endScreen\";\r\nimport Timer from \"./timer\";\r\nimport axios from \"axios\";\r\nimport { UserContext } from \"../../contexts/userContext\";\r\n\r\n\r\n//takign in levelNum in from app screen to know which level to display\r\nfunction InGame({levelNum, onScreenChangeCampaign, changeScreen}) {\r\n    //completion boolean 1 for incomplet then switches to 2 when complete\r\n    //also timer on off that's value is passed into timer and function is passed into words\r\n    //also index to control which index in text user is at\r\n    //elapsed time and function to update time also\r\n    const [timerOnOff, setTimerOnOff] = useState(0);\r\n    const [completion, setCompletion] = useState(1);\r\n    const [currentIndex, setCurrentIndex] = useState(0);\r\n    const [elapsedTime, setElapsedTime] = useState(0);\r\n\r\n    const [gotSkin, setGotSkin] = useState(0);\r\n    //so the skin is only axios.get once\r\n\r\n    const {user} = useContext(UserContext);\r\n    const [equiptSkin, setEquiptSkin] = useState(\"Default\");\r\n\r\n    useEffect(() => {\r\n        if(gotSkin === 0) {\r\n            axios.get(`http://localhost:5000/api/userProfile/${user}`)\r\n                .then(response => {\r\n                    setEquiptSkin(response.data.equiptSkin)\r\n                    setGotSkin(1);\r\n                })\r\n                .catch(error => {\r\n                    console.log('Error fetching user info:', error);\r\n                });\r\n        }\r\n    })\r\n\r\n    const changeTimer = (newTimeKey) => {\r\n        setTimerOnOff(newTimeKey);\r\n    }\r\n\r\n    const timerReset = () => {\r\n        setTimerOnOff(2);\r\n    }\r\n\r\n    const changeIndex = (newIndex) => {\r\n        setCurrentIndex(newIndex);\r\n    }\r\n\r\n    const resetIndex = () => {\r\n        setCurrentIndex(0);\r\n    }\r\n\r\n    const handleCompletionChange = (completionNum) => {\r\n        setCompletion(completionNum);\r\n    };\r\n\r\n    return <div style={{ display: 'flex', flexDirection: 'column' }}>\r\n        <Logo/>\r\n{/* passes in completion so can update when level completed and add <endscreen> */}\r\n        <Words levelNum={levelNum} setCompletion={handleCompletionChange} changeTimer={changeTimer} changeIndex={changeIndex} currentIndex={currentIndex}/>\r\n        <Keyboard equiptSkin={equiptSkin}/>\r\n        <Timer timerOnOff={timerOnOff} setElapsedTime={setElapsedTime} elapsedTime={elapsedTime}/>\r\n        {completion === 2 ? (<EndScreen onScreenChangeCampaign={onScreenChangeCampaign} changeScreen={changeScreen} timerReset={timerReset} resetIndex={resetIndex} handleCompletionChange={handleCompletionChange} elapsedTime={elapsedTime} levelNum={levelNum}/>) : null}\r\n    </div>\r\n}\r\n\r\nexport default InGame;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}